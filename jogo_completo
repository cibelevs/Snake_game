#include <iostream>
#include <raylib.h>
#include <deque>
#include <vector>
#include <raymath.h>

#define CONTROLE 2    // velocidade
#define TOTAL_BLOCOS 10

using namespace std;

// declarando variáveis para tamanhos
int tborda = 95;
float celula_n = 20; // (dimensão do grid)
int tamanho_da_tela = 800;
int celula_tam = (tamanho_da_tela - 2 * tborda) / celula_n; // Tamanho de cada célula

// definindo cores baseado no RGBA
Color green = {173, 204, 156, 255};
Color darkGreen = {43, 51, 24, 255};

static bool p_movimento = false; // controle para usuário fazer o movimento da cobra
int score = 0;     // Score atual

// temporizador para controlar a velocidade do jogo e das maças
struct Temporizador
{
    double atualizacao = 0;
    bool evento(double intervalo){
        double currentTime = GetTime();
        if (currentTime - atualizacao >= intervalo){
            atualizacao = currentTime;
            return true;
        }
        return false;
    }
};

// declarando variáveis para alterar o tempo
Temporizador temp_jogo;
Temporizador temp_comida;
Temporizador temp_obst;
double t = 0.2;
bool aumenta_velocidade = false;


void DesenhoCampo()
{
    float posX = tborda;
    float posY = tborda;
    float largura = celula_tam * celula_n;
    float altura = celula_tam * celula_n;
    float espessura = 5;

    DrawRectangleLinesEx(Rectangle{posX, posY, largura, altura}, espessura, darkGreen);
}

// Verifica se algum elemento está junto ao corpo da cobra
bool Elemento_Deque(Vector2 elemento, deque<Vector2> deque)
{
    for (unsigned int i = 0; i < deque.size(); i++){
        if (Vector2Equals(deque[i], elemento)){
            return true;
        }
    }
    return false;
}

class Cobra
{
public:
    // posições iniciais
    deque<Vector2> corpo = {Vector2{3, celula_n / 2}, Vector2{2, celula_n / 2}, Vector2{1, celula_n / 2}};
    deque<Vector2> corpo2 = {Vector2{celula_n - 4, celula_n / 2 - 1}, Vector2{celula_n - 3, celula_n / 2 - 1}, Vector2{celula_n - 2, celula_n / 2 - 1}};
    // direções
    Vector2 direcao1 = {1, 0};
    Vector2 direcao2 = {-1, 0};
    bool aumentarcobra = false;

    void Desenho(deque<Vector2> corpo, Color color)
    {
        // percorre os segmentos
        for (unsigned int i = 0; i < corpo.size(); i++){
            float x = corpo[i].x;
            float y = corpo[i].y;
            Rectangle segmento = Rectangle{tborda + x * celula_tam, tborda + y * celula_tam, (float)celula_tam, (float)celula_tam};
            DrawRectangleRounded(segmento, 0.5, 6, color);
        }
    }

    void Movimento(deque<Vector2> &corpo, Vector2 direcao)
    {
        corpo.push_front(Vector2Add(corpo[0], direcao)); // adiciona um elemento
        if (aumentarcobra == true){
            aumentarcobra = false;
        }
        else{
            corpo.pop_back();
        }
    }

    // função de recomeço
    void Start_over()
    {
        corpo = {Vector2{3, celula_n / 2}, Vector2{2, celula_n / 2}, Vector2{1, celula_n / 2}};
        direcao1 = {1, 0};
    }
    void Start_over2()
    {
        corpo2 = {Vector2{celula_n - 4, celula_n / 2 - 1}, Vector2{celula_n - 3, celula_n / 2 - 1}, Vector2{celula_n - 2, celula_n / 2 - 1}};
        direcao2 = {-1, 0};
    }
};

class Comida
{
public:
    Vector2 posicao; // coordenadas da maca
    Texture2D textura;

    Comida(deque<Vector2> corpoCobra)
    {
        Image imagem = LoadImage("C:/Users/T-GAMER/Documents/game raylib/imagens/one_apple.png");
        textura = LoadTextureFromImage(imagem);
        UnloadImage(imagem);
        posicao = PosicinarComponente(corpoCobra, corpoCobra);
    }

    ~Comida()
    {
        UnloadTexture(textura);
    }

    void Desenho()
    {
        DrawTexture(textura, tborda + posicao.x * celula_tam, tborda + posicao.y * celula_tam, RED);
    }

    Vector2 GerarComponenteAleatoriamente()
    {
        float x = GetRandomValue(0, celula_n - 1);
        float y = GetRandomValue(0, celula_n - 1);
        return Vector2{x, y}; // coordenadas x e y aleatorias
    }

    // verifica um local válido
    Vector2 PosicinarComponente(deque<Vector2> corpoCobra, deque<Vector2> corpoCobra2)
    {
        Vector2 position = GerarComponenteAleatoriamente();
        while (Elemento_Deque(position, corpoCobra) || Elemento_Deque(position, corpoCobra2)){
            position = GerarComponenteAleatoriamente();
        }
        return position;
    }
};

class Obstacles
{
public:
    struct Obstaculo
    {
        Rectangle retang;
        Obstaculo(float x, float y, float width, float height){
            retang.x = x;
            retang.y = y;
            retang.height = height;
            retang.width = width;
        }
    };

    Rectangle parede = {120, 100, (float)celula_tam, (float)celula_tam}; // tam fixo paredes
    vector<Obstaculo *> obstacles;
    deque<Vector2> historico_obstaculos;
    Vector2 novaPosicao; // x e y

    void gerar_obstaculo(deque<Vector2> corpoCobra, deque<Vector2> corpoCobra2)
    {
        // controle da quantidade de obstaculos
        if (obstacles.size() >= TOTAL_BLOCOS){
            return;
        }

        do
        {
            // gear posição válida que não colida com a cobra ou outros obstáculos
            float x = GetRandomValue(0, celula_n - 1) * celula_tam + tborda;
            float y = GetRandomValue(0, celula_n - 1) * celula_tam + tborda;
            novaPosicao = Vector2{x, y};
        } while (Elemento_Deque(Vector2{(novaPosicao.x - tborda) / celula_tam, (novaPosicao.y - tborda) / celula_tam}, corpoCobra) ||
        colisao_com_obstaculo(novaPosicao) || Elemento_Deque(Vector2{(novaPosicao.x - tborda) / celula_tam, (novaPosicao.y - tborda) / celula_tam}, corpoCobra2));
        // cria novo obstáculo
        obstacles.push_back(new Obstaculo(novaPosicao.x, novaPosicao.y, (float)celula_tam, (float)celula_tam));
    }

    void AtualizaPosicaoObstaculo(Vector2 novaPosicao)
    {
        // coloca a posição anterior do obstáculo no histórico
        historico_obstaculos.push_front(novaPosicao);
        if (historico_obstaculos.size() > TOTAL_BLOCOS){
            historico_obstaculos.pop_back(); // limita o tam de historico
        }
    }

    // Função auxiliar para verificar colisões com obstáculos existentes
    bool colisao_com_obstaculo(Vector2 novaPosicao)
    {
        for (auto &obst : obstacles){
            if (CheckCollisionRecs(Rectangle{novaPosicao.x, novaPosicao.y, (float)celula_tam, (float)celula_tam}, obst->retang)){
                return true;
            }}
        return false;
    }

    // Função para desenhar os obstáculos
    void desenhar()
    {
        for (auto &obst : obstacles){
            DrawRectangleRec(obst->retang, BLACK); // Desenha o retângulo
        }
    }
    ~Obstacles()
    {
        for (auto &obst : obstacles){
            delete obst; // liberando a memoria
        }
    }
};

class Game
{
public:
    Cobra cobra = Cobra();
    Cobra cobra2 = Cobra();

    Comida comida = Comida(cobra.corpo);

    Obstacles obstaculo = Obstacles();

    // variaveis de som
    Sound som_comida;
    Sound som_gameover;

    // variavel de tempo
    float time = 4.0f;

    // controle do jogo e score
    bool running = false;
    bool over = false;

    Rectangle cabeca_cobra = {
        tborda + cobra.corpo[0].x * celula_tam, // Converte a posição da cabeça para pixels
        tborda + cobra.corpo[0].y *celula_tam,
        (float)celula_tam,
        (float)celula_tam};

    Rectangle cabeca_cobra2 = {
        tborda + cobra2.corpo2[0].x * celula_tam, // Converte a posição da cabeça para pixels
        tborda + cobra2.corpo2[0].y *celula_tam,
        (float)celula_tam,
        (float)celula_tam};

    void AtualizaCabecaCobra() {
        cabeca_cobra.x = tborda + cobra.corpo[0].x * celula_tam;
        cabeca_cobra.y = tborda + cobra.corpo[0].y * celula_tam;
        cabeca_cobra2.x = tborda + cobra2.corpo2[0].x * celula_tam;
        cabeca_cobra2.y = tborda + cobra2.corpo2[0].y * celula_tam;
    }

    Game()
    {
        InitAudioDevice();
        som_comida = LoadSound("C:/Users/T-GAMER/Documents/game raylib/componentes_audio/come_maca.mp3");
        som_gameover = LoadSound("C:/Users/T-GAMER/Documents/game raylib/componentes_audio/gameover.mp3");
    }

    ~Game()
    {
        UnloadSound(som_comida);
        UnloadSound(som_gameover);
        CloseAudioDevice();
    }

    void Draw()
    {
        ClearBackground(green);
        DesenhoCampo();
        DrawText("Snake Game Extendido", tborda - 5, 20, 40, darkGreen);
        DrawText(TextFormat("Score atual -> %i", score), tborda - 5, tborda + celula_tam * celula_n + 10, 40, darkGreen);
        if (running == false && over == false){
            DrawText("Use enter para começar o jogo!", tborda - 5, 70, 20, DARKGREEN);
            if (IsKeyPressed(KEY_ENTER)){
                running = true;
            }
        }
        if (over == true && running == false){
            DrawText("Game Over! Use enter para recomeçar", tborda - 5, 70, 20, DARKGREEN);
            if (IsKeyPressed(KEY_ENTER)){
                running = true;
            }
        }
        comida.Desenho();
        cobra.Desenho(cobra.corpo, darkGreen);
        cobra2.Desenho(cobra2.corpo2, LIME);
        obstaculo.desenhar();
    }

    void Atualiza()
    {
        if (running){
            cobra.Movimento(cobra.corpo, cobra.direcao1);
            cobra2.Movimento(cobra2.corpo2, cobra2.direcao2);
            Colisao_paredes();
            Aumentar_cobra();
            Posiciona_comida(troca);
            Colisao_cobra();
            Atualizar_obt(time);
        }
    }

    // função para atualizar o tempo e gerar obstáculos
    void Atualizar_obt(float deltaTime)
    {
        if (temp_obst.evento(deltaTime)){
            obstaculo.gerar_obstaculo(cobra.corpo, cobra2.corpo2);
        }
    }

    // verifica se a maça esta atras de um obstaculo de lugar
    bool troca = false;
    void Verifica(Vector2 comidaposicao)
    {
        for (const auto &obst : obstaculo.historico_obstaculos){
            if (Vector2Equals(comidaposicao, obst) || Elemento_Deque(comidaposicao, cobra.corpo) || Elemento_Deque(comidaposicao, cobra2.corpo2)){
                troca = true;
                return;
            }
        }
        troca = false;
    }

   void Posiciona_comida(bool fator)
    {
        if (fator == true)
        {
            comida.posicao = comida.PosicinarComponente(cobra.corpo, cobra2.corpo2); // troca de lugar                    
        }
        else
        {
            if (temp_comida.evento(6.75)){
                // só troca se a comida não foi comida em um intervalo
                if (!cobra.aumentarcobra) {
                    comida.posicao = comida.PosicinarComponente(cobra.corpo, cobra2.corpo2);
                }
            }
        }
    }

    void colocando_maca(){
        comida.posicao = comida.PosicinarComponente(cobra.corpo, cobra2.corpo2);
        Verifica(comida.posicao); // verifica local da maça
    }

    void Aumentar_cobra()
    {
        if ((Vector2Equals(cobra.corpo[0], comida.posicao) || Vector2Equals(cobra2.corpo2[0], comida.posicao))) {
            colocando_maca();
            cobra.aumentarcobra = true;
            cobra2.aumentarcobra = true;
            score = score + 2;
            PlaySound(som_comida);
        }
        // Verifica se a cobra consumiu a comida
        if (Vector2Equals(cobra.corpo[0], comida.posicao) || Vector2Equals(cobra2.corpo2[0], comida.posicao))
        {
            colocando_maca();
            cobra.aumentarcobra = true;
            cobra2.aumentarcobra = true;
            score++;
            PlaySound(som_comida);
        }
       
    }
    void Colisao_paredes()
    {
        // Atualizando as coordenadas
        AtualizaCabecaCobra();
        // Colisão com a parede (borda fixa)
        if (cobra.corpo[0].x == celula_n || cobra.corpo[0].x == -1 ||
            cobra.corpo[0].y == celula_n || cobra.corpo[0].y == -1){
            GameOver();
        }

        if (cobra2.corpo2[0].x == celula_n || cobra2.corpo2[0].x == -1 ||
            cobra2.corpo2[0].y == celula_n || cobra2.corpo2[0].y == -1){
            GameOver();
        }

        // colisão com os obstáculos (dinamicamente)
        for (auto &obst : obstaculo.obstacles)
        {
            if (CheckCollisionRecs(cabeca_cobra, obst->retang)){
                GameOver();
            }
            if (CheckCollisionRecs(cabeca_cobra2, obst->retang)){
                GameOver();
            }
        }

        // colisao cabeca de cobra e corpo de cobra2
        for (size_t i = 1; i < cobra2.corpo2.size(); i++){
            Rectangle corpo_cobra2 = {
                tborda + cobra2.corpo2[i].x * celula_tam,
                tborda + cobra2.corpo2[i].y * celula_tam,
                (float)celula_tam,
                (float)celula_tam
            };
            if (CheckCollisionRecs(cabeca_cobra, corpo_cobra2)){
                GameOver();
            }
        }
    }

    void GameOver()
    {
        cobra.Start_over(); // pos inicial e tempo inicial
        cobra2.Start_over2();
        running = false; // atualização nao ocorre
        colocando_maca();
        over = true;
        score = 0;
        t = 0.2;
        obstaculo.obstacles.clear(); // tira os obstaculos
        PlaySound(som_gameover);
    }

    void Colisao_cobra()
    {
        deque<Vector2> corpo_scabeca = cobra.corpo;
        corpo_scabeca.pop_front(); // retira a cabeça da cobra
        if (Elemento_Deque(cobra.corpo[0], corpo_scabeca)){
            GameOver();
        }
    }
    
};

int main()
{
    cout << "Comecando o jogo..." << endl;
    InitWindow(tamanho_da_tela, tamanho_da_tela, "Game");
    SetTargetFPS(60);
    Game game = Game();

    while (WindowShouldClose() == false)
    {
        BeginDrawing();

        if (temp_jogo.evento(t)){
            p_movimento = true;
            game.Atualiza();
        }

        // Checar se o score é múltiplo de "controle"
        if (score % CONTROLE == 0 && score > 0){
            if (!aumenta_velocidade) // evita aumentar a velocidade dnv 
            {
                t -= 0.01275;
                aumenta_velocidade = true;
            }
        }
        else{
            aumenta_velocidade = false; // Reseta para próximas verificações
        }

        if (IsKeyPressed(KEY_UP) && game.cobra.direcao1.y != 1 && p_movimento){
            game.cobra.direcao1 = {0, -1};
            game.cobra2.direcao2 = {0, 1};
            p_movimento = false;
        }
        if (IsKeyPressed(KEY_DOWN) && game.cobra.direcao1.y != -1 && p_movimento){
            game.cobra.direcao1 = {0, 1};
            game.cobra2.direcao2 = {0, -1};
            p_movimento = false;
        }
        if (IsKeyPressed(KEY_LEFT) && game.cobra.direcao1.x != 1 && p_movimento){
            game.cobra.direcao1 = {-1, 0};
            game.cobra2.direcao2 = {1, 0};
            p_movimento = false;
        }
        if (IsKeyPressed(KEY_RIGHT) && game.cobra.direcao1.x != -1 && p_movimento){
            game.cobra.direcao1 = {1, 0};
            game.cobra2.direcao2 = {-1, 0};
            p_movimento = false;
        }
        game.Draw();
        EndDrawing();
    }
    CloseWindow();
    return 0;
}
